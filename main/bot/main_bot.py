import telebot
import datetime
import aiofiles
from django.conf import settings
from bot.models import TelegramUser
from bot.example_text import helper
from django.dispatch import receiver
from asgiref.sync import sync_to_async
from main_table_admin.models import MONTHS_RU, MainTableAdmin
from telebot.async_telebot import AsyncTeleBot
from django.db.models.signals import post_save, post_init
from bot.middleware import AddNewUserMiddleware
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from main.database.get_data_lesson import get_data_lesson, set_data_user_lesson, get_data_my_lesson

bot = AsyncTeleBot(settings.TG_API_KEY, parse_mode='HTML')
telebot.logger.setLevel(settings.LOGLEVEL)

bot.setup_middleware(AddNewUserMiddleware(bot))


def require_authentication(func):
    async def wrapper(message, *args, **kwargs):
        if message.from_user.is_bot is True:
            user = await get_telegram_user_sync(message.chat.id)
        else:
            user = await get_telegram_user_sync(message.from_user.id)
        if not user or not user.is_authenticated:
            await bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        else:
            await func(message, *args, **kwargs)

    return wrapper


@sync_to_async
def get_telegram_user_sync(user_id):
    try:
        user = TelegramUser.objects.get(telegram_user_id=user_id)
        return user
    except TelegramUser.DoesNotExist:
        return None


@bot.message_handler(regexp='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ ü§∏‚Äç‚ôÇÔ∏è')
@require_authentication
async def send_calendar(message):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton(text="–ü–æ –≤–∏–¥—É –∑–∞–Ω—è—Ç–∏—è", callback_data="by_type"),
        InlineKeyboardButton(text="–ö —Ç—Ä–µ–Ω–µ—Ä—É", callback_data="by_trainer"),
        InlineKeyboardButton(text="–ü–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏", callback_data="any")
    )
    await bot.send_message(message.chat.id, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data in ['by_type', 'by_trainer', 'any'])
    async def choose_option(call):
        result = await get_data_lesson(call.data)
        if call.data == "by_type":
            await choose_by_type(call.message, result)
        elif call.data == "by_trainer":
            await choose_by_trainer(call.message, result)
        elif call.data == "any":
            await choose_any(call.message, result)

    async def choose_by_type(message, lesson_types):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –∑–∞–Ω—è—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        markup = InlineKeyboardMarkup(row_width=1)
        for lesson_type in lesson_types:
            markup.add(InlineKeyboardButton(text=lesson_type, callback_data=f"type_{lesson_type}"))
        markup.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_month"))

        await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∑–∞–Ω—è—Ç–∏—è:", message.chat.id, message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('type_'))
    async def handle_lesson_type(call):
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –∏–∑ call.data
        lesson_type = call.data.split('_')[1]
        lesson_check = []
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
        dates = await get_data_lesson(call.data, data=lesson_type)
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π
        markup = InlineKeyboardMarkup(row_width=1)
        for lesson in dates['lesson']:
            if lesson.number_of_recorded >= lesson.max_number_of_recorded - 3:
                formatted_date = f"{lesson.date.strftime('%d')} {MONTHS_RU[lesson.date.month]} {lesson.date.strftime('%Y')} –≥. {lesson.date.strftime('%H:%M')}"
                lesson_check.append(formatted_date)
        for date in dates['date']:
            formatted_date = f"{date.strftime('%d')} {MONTHS_RU[date.month]} {date.strftime('%Y')} –≥. {date.strftime('%H:%M')}"
            markup.add(InlineKeyboardButton(text=str(formatted_date), callback_data=f"date_{date}"))
        markup.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_month"))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è
        if lesson_check:
            await bot.edit_message_text(
                f"<blockquote>Ô∏è<i> –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ(—è): \n<b>{', '.join(lesson_check)}\n"
                f"–æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –º–µ—Å—Ç.</b> </i></blockquote>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:",
                call.message.chat.id, call.message.message_id, reply_markup=markup)
        elif not lesson_check:
            await bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:", call.message.chat.id, call.message.message_id,
                                        reply_markup=markup)

    async def choose_by_trainer(message, trainers):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        markup = InlineKeyboardMarkup(row_width=1)
        for trainer in trainers:
            if trainer.last_name:
                markup.add(InlineKeyboardButton(text=f"{trainer.first_name} {trainer.last_name}",
                                                callback_data=f"trainer_{trainer.id}"))
            else:
                markup.add(InlineKeyboardButton(text=f"{trainer.first_name}",
                                                callback_data=f"trainer_{trainer.id}"))
        markup.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_month"))

        await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞:", message.chat.id, message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('trainer_'))
    async def handle_trainer_lesson_type(call):
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –∏–∑ call.data
        trainer = call.data.split('_')[1]
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
        lesson = await get_data_lesson(call.data, data=trainer)
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π
        markup = InlineKeyboardMarkup(row_width=1)
        for types in lesson:
            markup.add(InlineKeyboardButton(text=str(types), callback_data=f"trainers_lesson_{types}"))
        markup.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_month"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è
        await bot.edit_message_text(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∑–∞–Ω—è—Ç–∏—è:",
                                    message_id=call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('trainers_lesson_'))
    async def handle_trainer_lesson_date(call):
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –∏–∑ call.data
        lesson = call.data.split('_')[2]
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
        lesson_check = []
        data = await get_data_lesson(call.data, data=lesson)
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π
        markup = InlineKeyboardMarkup(row_width=1)
        for lesson in data['lesson']:
            if lesson.number_of_recorded >= lesson.max_number_of_recorded - 3:
                formatted_date = f"{lesson.date.strftime('%d')} {MONTHS_RU[lesson.date.month]} {lesson.date.strftime('%Y')} –≥. {lesson.date.strftime('%H:%M')}"
                lesson_check.append(formatted_date)
        for types in data['date']:
            formatted_date = f"{types.strftime('%d')} {MONTHS_RU[types.month]} {types.strftime('%Y')} –≥. {types.strftime('%H:%M')}"
            markup.add(InlineKeyboardButton(text=str(formatted_date), callback_data=f"date_{types}"))
        markup.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_month"))
        if lesson_check:
            await bot.edit_message_text(
                f"<blockquote>Ô∏è<i> –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ(—è): \n<b>{', '.join(lesson_check)}\n"
                f"–æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –º–µ—Å—Ç.</b> </i></blockquote>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:",
                call.message.chat.id, call.message.message_id, reply_markup=markup)
        elif not lesson_check:
            await bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:", call.message.chat.id, call.message.message_id,
                                        reply_markup=markup)


    async def choose_any(message, dates):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        lesson_check = []
        markup = InlineKeyboardMarkup(row_width=1)
        for lesson in dates['lesson']:
            if lesson.number_of_recorded >= lesson.max_number_of_recorded - 3:
                formatted_date = f"{lesson.date.strftime('%d')} {MONTHS_RU[lesson.date.month]} {lesson.date.strftime('%Y')} –≥. {lesson.date.strftime('%H:%M')}"
                lesson_check.append(formatted_date)
        for date in dates['date']:
            formatted_date = f"{date.strftime('%d')} {MONTHS_RU[date.month]} {date.strftime('%Y')} –≥. {date.strftime('%H:%M')}"
            markup.add(InlineKeyboardButton(text=str(formatted_date), callback_data=f"date_{date}"))
        markup.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_month"))
        if lesson_check:
            await bot.edit_message_text(
                f"<blockquote>Ô∏è<i> –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ(—è): \n<b>{', '.join(lesson_check)}\n"
                f"–æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –º–µ—Å—Ç.</b> </i></blockquote>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:",
                message.chat.id, message.message_id, reply_markup=markup)
        elif not lesson_check:
            await bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:", message.chat.id, message.message_id,
                                        reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
    async def handle_date(call):
        date = call.data.split('_')[1]
        try:
            date_relative = call.data.split('_')[2]
        except Exception:
            date_relative = None

        data = await get_data_lesson(call.data, data=date, message=call.message.chat.id, relative_user=date_relative)
        if not data['state'] and data['relative_user']:
            keyboard_relative_user = InlineKeyboardMarkup(row_width=1)
            keyboard_relative_user.add(
                InlineKeyboardButton(text=f'{data["relative_user"].first_name} {data["relative_user"].last_name}',
                                     callback_data=f'date_{date}_{data["relative_user"].pk}'))
            keyboard_relative_user.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_month"))
            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        text="<blockquote>Ô∏è<i>–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å "
                                             "—Å–≤–æ–µ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, <b>–µ—Å–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–º –ù–∞—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–∑–∞–ª–∞</b>.\n"
                                             "–ü–æ—Å–ª–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ –µ–º—É –ø—Ä–µ–π–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</i></blockquote>Ô∏è"
                                             "–í–∞—à —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫:",
                                        message_id=call.message.message_id, reply_markup=keyboard_relative_user)
        elif not data['state'] and not data['relative_user']:
            keyboard_no_relative_user = InlineKeyboardMarkup(row_width=1)
            keyboard_no_relative_user.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_month"))
            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        text="<blockquote>Ô∏è<i>–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å "
                                             "—Å–≤–æ–µ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, <b>–µ—Å–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–º –ù–∞—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞</b>.\n"
                                             "–ü–æ—Å–ª–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ –µ–º—É –ø—Ä–µ–π–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</i></blockquote>Ô∏è"
                                             "–£ –í–∞—Å –Ω–µ—Ç —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –ø–æ—Å–µ—â–∞—é—â–∏—Ö –ù–∞—à —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±.",
                                        message_id=call.message.message_id, reply_markup=keyboard_no_relative_user)
        if data['state'] and not date_relative:
            await set_data_user_lesson(call, date, relative_user=date_relative)
            if not data['tmp'][0].check_canceled:
                if data['tmp'][0].number_of_recorded < data['tmp'][0].max_number_of_recorded:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞—Ç–µ
                    formatted_date = (f"{data['tmp'][0].date.strftime('%d')} {MONTHS_RU[data['tmp'][0].date.month]} "
                                      f"{data['tmp'][0].date.strftime('%Y')} –≥. {data['tmp'][0].date.strftime('%H:%M')}")
                    await bot.edit_message_text(chat_id=call.message.chat.id,
                                                text=f"<b>–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ —Ç—Ä–µ–Ω–µ—Ä—É: {data['tmp'][0].trainer}\n"
                                                     f"–ù–∞ –∑–∞–Ω—è—Ç–∏–µ: {data['tmp'][0].lesson}\n"
                                                     f" {formatted_date}</b>", message_id=call.message.message_id)
                    await bot.send_sticker(call.message.chat.id,
                                           sticker='CAACAgIAAxkBAAELtpdl9WfB4snERAkVgZOph6nRzVHAYwACqQADFkJrCiSoJ_sldvhYNAQ')
                    with open(f'bot/logging/{call.message.chat.id}', 'a+', encoding='utf-8') as file:
                        file.write(
                            f"[INFO]-[{datetime.datetime.now()}]:–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ —Ç—Ä–µ–Ω–µ—Ä—É: "
                            f"{data['tmp'][0].trainer} - –ù–∞ –∑–∞–Ω—è—Ç–∏–µ: {data['tmp'][0].lesson} - {formatted_date}\n")
        elif data['state'] and date_relative and data['state_relative_user']:
            await set_data_user_lesson(call, date, relative_user=date_relative)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞—Ç–µ
            formatted_date = (f"{data['tmp'][0].date.strftime('%d')} {MONTHS_RU[data['tmp'][0].date.month]} "
                              f"{data['tmp'][0].date.strftime('%Y')} –≥. {data['tmp'][0].date.strftime('%H:%M')}")
            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        text=f"<b>–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ {data['relative_user'].first_name} "
                                             f"{data['relative_user'].last_name}\n –∑–∞–ø–∏—Å–∞–Ω(–∞) –∫ —Ç—Ä–µ–Ω–µ—Ä—É: {data['tmp'][0].trainer}\n"
                                             f"–ù–∞ –∑–∞–Ω—è—Ç–∏–µ: {data['tmp'][0].lesson}\n"
                                             f" {formatted_date}</b>", message_id=call.message.message_id)
            await bot.send_sticker(call.message.chat.id,
                                   sticker='CAACAgIAAxkBAAELtpdl9WfB4snERAkVgZOph6nRzVHAYwACqQADFkJrCiSoJ_sldvhYNAQ')
            with open(f'bot/logging/{call.message.chat.id}', 'a+', encoding='utf-8') as file:
                file.write(
                    f"[INFO]-[{datetime.datetime.now()}]:–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ {data['relative_user'].first_name} "
                    f"{data['relative_user'].last_name} –∑–∞–ø–∏—Å–∞–Ω(–∞) –∫ —Ç—Ä–µ–Ω–µ—Ä—É: {data['tmp'][0].trainer} - –ù–∞ –∑–∞–Ω—è—Ç–∏–µ: {data['tmp'][0].lesson} - {formatted_date}\n")
        elif data['state'] and date_relative and not data['state_relative_user']:
            keyboard_no_relative_user = InlineKeyboardMarkup(row_width=1)
            keyboard_no_relative_user.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_month"))
            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        text="<blockquote>Ô∏è<i>–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å "
                                             "—Å–≤–æ–µ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, <b>–µ—Å–ª–∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–º –ù–∞—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞</b>.\n"
                                             "–ü–æ—Å–ª–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ –µ–º—É –ø—Ä–µ–π–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</i></blockquote>Ô∏è"
                                             "–í–∞—à —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ.",
                                        message_id=call.message.message_id, reply_markup=keyboard_no_relative_user)
        elif data['tmp'][0].number_of_recorded == data['tmp'][0].max_number_of_recorded:
            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        text=f'<blockquote>Ô∏è<i>‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n'
                                             f'–ó–∞–ø–∏—Å—å –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∞.</i></blockquote>Ô∏è\n'
                                             f'<b>–ü—Ä–∏–∏—á–∏–Ω–∞:</b> –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ª—é–¥–µ–π –∫ –∑–∞–Ω—è—Ç–∏—é.',
                                        message_id=call.message.message_id, reply_markup=keyboard_no_relative_user)

    @bot.callback_query_handler(func=lambda call: call.data == "back_to_month")
    async def back_to_month(call):
        await bot.edit_message_text(chat_id=call.message.chat.id, text="–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ?",
                                    message_id=call.message.message_id, reply_markup=markup)


@bot.message_handler(regexp='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π üßò‚Äç‚ôÇÔ∏è')
@require_authentication
async def schedule(message):
    sent_message = await bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π.")
    file_path = await get_data_lesson(message)
    if not file_path:
        await bot.delete_message(message.chat.id, sent_message.message_id)
        await bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –µ—â–µ –Ω–µ—Ç.")
        with open(f'bot/logging/{message.from_user.id}', 'a+', encoding='utf-8') as file:
            file.write(f"[INFO]-[{datetime.datetime.now()}]: –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –µ—â–µ –Ω–µ—Ç.\n")
    elif not file_path[1]:
        await bot.delete_message(message.chat.id, sent_message.message_id)
        await bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –µ—â–µ –Ω–µ—Ç.")
        with open(f'bot/logging/{message.from_user.id}', 'a+', encoding='utf-8') as file:
            file.write(f"[INFO]-[{datetime.datetime.now()}]: –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –µ—â–µ –Ω–µ—Ç.\n")
    else:
        for week in file_path:
            async with aiofiles.open(week[0].schedule.path, 'rb') as file:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_document(message.chat.id, file)
        with open(f'bot/logging/{message.from_user.id}', 'a+', encoding='utf-8') as file:
            file.write(f"[INFO]-[{datetime.datetime.now()}]:–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é.\n")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        await bot.delete_message(message.chat.id, sent_message.message_id)
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="schedule_")
        )
        await bot.send_message(message.chat.id, "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=markup)

        @bot.callback_query_handler(func=lambda call: call.data in ['schedule_'])
        async def choose_schedule(call):
            result = await get_data_lesson(call.data)
            keyboard_2 = InlineKeyboardMarkup(row_width=1)
            for lesson_type in result:
                keyboard_2.add(InlineKeyboardButton(text=lesson_type, callback_data=f"schedule_type_{lesson_type}"))

            await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∑–∞–Ω—è—Ç–∏—è:", call.message.chat.id, call.message.message_id,
                                        reply_markup=keyboard_2)

            @bot.callback_query_handler(func=lambda call: call.data == "back_to_lesson")
            async def back_to_lesson(call):
                await bot.edit_message_text(chat_id=call.message.chat.id,
                                            text="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
                                            message_id=call.message.message_id, reply_markup=keyboard_2)

        @bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_type_'))
        async def choose_schedule(call):
            lesson_type = call.data.split('_')[2]
            result = await get_data_lesson(call.data, data=lesson_type)
            print(result)
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_lesson"))

            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        text=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ: {result.title}</b>\n'
                                             f'–û–ø–∏—Å–∞–Ω–∏–µ: {result.description}',
                                        message_id=call.message.message_id, reply_markup=keyboard)


@bot.message_handler(regexp='–ó–∞–Ω—è—Ç–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ãüìÜ')
@require_authentication
async def my_lesson(message):
    data = await get_data_my_lesson(message)
    if not data['user']:
        await bot.send_message(message.chat.id, "–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.")
    elif data['user']:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π
        keyboard = InlineKeyboardMarkup(row_width=1)
        for user_lesson in data['user']:
            formatted_date = (f"{user_lesson.date.strftime('%d')} "
                              f"{MONTHS_RU[user_lesson.date.month]} {user_lesson.date.strftime('%Y')} –≥. "
                              f"{user_lesson.date.strftime('%H:%M')}")
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            lesson_title = f"{user_lesson.lesson} - {formatted_date}"
            # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏
            callback_data = f"lesson_{user_lesson.pk}"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(InlineKeyboardButton(text=lesson_title, callback_data=callback_data))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π
        await bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π:", reply_markup=keyboard)
    if data['relative_user']:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π
        keyboard = InlineKeyboardMarkup(row_width=1)
        for user_lesson in data['relative_user']:
            formatted_date = (f"{user_lesson.date.strftime('%d')} "
                              f"{MONTHS_RU[user_lesson.date.month]} {user_lesson.date.strftime('%Y')} –≥. "
                              f"{user_lesson.date.strftime('%H:%M')}")
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            lesson_title = f"{user_lesson.lesson} - {formatted_date}"
            # –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏
            callback_data = f"lesson_{user_lesson.pk}"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(InlineKeyboardButton(text=lesson_title, callback_data=callback_data))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π
        await bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π –í–∞—à–µ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:", reply_markup=keyboard)

    @bot.callback_query_handler(lambda query: query.data.startswith('lesson_'))
    async def lesson_info(query):
        lesson_id = int(query.data.split('_')[1])
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –ø–æ –µ–≥–æ ID
        user_lesson = await get_data_my_lesson(query.data, data=lesson_id)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
        formatted_date = (f"{user_lesson.date.strftime('%d')} "
                          f"{MONTHS_RU[user_lesson.date.month]} {user_lesson.date.strftime('%Y')} –≥. "
                          f"{user_lesson.date.strftime('%H:%M')}")
        lesson_info_text = (
            f"<b>–ó–∞–Ω—è—Ç–∏–µ:</b> {user_lesson.lesson}\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {formatted_date}\n"
            f"<b>–¢—Ä–µ–Ω–µ—Ä:</b> {user_lesson.trainer.first_name} {user_lesson.trainer.last_name}\n"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" –∏ "–ù–∞–∑–∞–¥"
        keyboard_2 = InlineKeyboardMarkup()
        keyboard_2.add(InlineKeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è ‚õîÔ∏è", callback_data=f"unsubscribe_{lesson_id}"))
        keyboard_2.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_lessons"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–Ω—è—Ç–∏–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.edit_message_text(chat_id=query.message.chat.id, text=lesson_info_text,
                                    message_id=query.message.message_id, reply_markup=keyboard_2)

    @bot.callback_query_handler(lambda query: query.data == 'back_to_lessons')
    async def back_to_lessons(query):
        await bot.edit_message_text(chat_id=query.message.chat.id, text="–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π:",
                                    message_id=query.message.message_id, reply_markup=keyboard)

    @bot.callback_query_handler(lambda query: query.data.startswith('unsubscribe_'))
    async def unsubscribe_from_lesson(query):
        lesson_id = int(query.data.split('_')[1])
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–Ω—è—Ç–∏—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è

        await get_data_my_lesson(query.data, data=lesson_id)

        with open(f'bot/logging/{query.message.chat.id}', 'a+', encoding='utf-8') as file:
            file.write(f"[INFO]-[{datetime.datetime.now()}]:–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∑–∞–Ω—è—Ç–∏—è id:{lesson_id}\n")
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–Ω—è—Ç–∏–∏
        await bot.edit_message_text(chat_id=query.message.chat.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∑–∞–Ω—è—Ç–∏—è.",
                                    message_id=query.message.message_id)
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π


async def canceled_lesson_post_message_users(data):
    message_help = (
        f'<blockquote>Ô∏è<i>‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n '
        f'<b>–ó–∞–Ω—è—Ç–∏–µ:</b> {data["lesson_title"][0]}\n'
        f'<b>–í—Ä–µ–º—è:</b> {data["lesson"][0].date}\n'
        f' <b>–û–¢–ú–ï–ù–ï–ù–û!üòî</b></i></blockquote>Ô∏è\n'
        f' <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {data["lesson"][0].check_canceled_description}')
    for user in data['tg_users']:
        await bot.send_message(chat_id=user, text=message_help)


@bot.message_handler(func=lambda message: True)
@require_authentication
async def echo_message(message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ ü§∏‚Äç‚ôÇÔ∏è'))
    keyboard.add(KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π üßò‚Äç‚ôÇÔ∏è'))
    keyboard.add(KeyboardButton('–ó–∞–Ω—è—Ç–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ãüìÜ'))

    await bot.send_message(message.chat.id, helper, reply_markup=keyboard)
